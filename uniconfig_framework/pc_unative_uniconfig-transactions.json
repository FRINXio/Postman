{
	"info": {
		"_postman_id": "d9c10d9f-b3b4-4bbf-a232-6a79af21068f",
		"name": "pc_unative_uniconfig_transactions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR6 UC transactions",
			"item": [
				{
					"name": "XR6 UC transactions Teardown",
					"item": [
						{
							"name": "delete cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// create a cookie jar",
											"const cookieJar = pm.cookies.jar();",
											"",
											"// Delete the created cookie",
											"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
											"  if (error) {",
											"    console.error(`An error occurred: ${error}`);",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration=act,{{test_interface}}"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create TXID1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
											"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
											"});",
											"",
											"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
											"",
											"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:create-transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "SNAPSHOT: replace-config-with-snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-test\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"snapshot-manager:replace-config-with-snapshot"
									]
								},
								"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
							},
							"response": []
						},
						{
							"name": "SNAPSHOT: calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "Commit all nodes inside of proper TXID1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node2_id\"));",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								},
								"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
							},
							"response": []
						},
						{
							"name": "SNAPSHOT: calculate diff Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// create a cookie jar",
											"const cookieJar = pm.cookies.jar();",
											"",
											"// Delete the created cookie",
											"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
											"  if (error) {",
											"    console.error(`An error occurred: ${error}`);",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "Commit outside of any TXID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// create a cookie jar",
											"const cookieJar = pm.cookies.jar();",
											"",
											"// Delete the created cookie",
											"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
											"  if (error) {",
											"    console.error(`An error occurred: ${error}`);",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								},
								"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
							},
							"response": [
								{
									"name": "Commit outside of any TXID SAFI",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 08 Jul 2021 16:47:18 GMT"
										},
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=node016z6vx3s440e91wl6yotd49ew9175.node0;Path=/"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Wed, 07-Jul-2021 16:47:18 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Content-Length",
											"value": "569"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"xr6_2\",\n                    \"configuration-status\": \"fail\",\n                    \"error-message\": \"RemoteDevice{xr6_2}: Confirmed commit failed. 'RSI' detected the 'fatal' condition 'The specified SAFI is unsupported'\\n\",\n                    \"error-type\": \"processing-error\",\n                    \"rollback-status\": \"complete\"\n                },\n                {\n                    \"node-id\": \"xr6_1\",\n                    \"configuration-status\": \"fail\",\n                    \"error-message\": \"RemoteDevice{xr6_1}: Confirmed commit failed. 'RSI' detected the 'fatal' condition 'The specified SAFI is unsupported'\\n\",\n                    \"error-type\": \"processing-error\",\n                    \"rollback-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"fail\"\n    }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "All-UC transactions Setup",
					"item": [
						{
							"name": "XR6-netconf Mount uniconfig-native",
							"item": [
								{
									"name": "Install IOS XR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate complete\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}_1\",\n        \"netconf\": {\n            \"netconf-node-topology:host\": \"{{xr_ip}}\",\n            \"netconf-node-topology:port\": {{netconf_port}},\n            \"netconf-node-topology:keepalive-delay\": 0,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:dry-run-journal-size\": 180,\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"uniconfig-config:blacklist\": {\n             \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"]\n      }\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:install-node"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "XR6-netconf Mount uniconfig-native 2",
							"item": [
								{
									"name": "Install IOS XR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate complete\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node2_id}}\",\n        \"netconf\": {\n            \"netconf-node-topology:host\": \"{{xr2_ip}}\",\n            \"netconf-node-topology:port\": {{netconf_port}},\n            \"netconf-node-topology:keepalive-delay\": 0,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:dry-run-journal-size\": 180,\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"uniconfig-config:blacklist\": {\n             \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"]\n      }\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:install-node"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create snapshot",
							"item": [
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "SNAPSHOT: create-snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-test\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										},
										"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node2_id\"));",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 01-Modification-of-different-sub-trees-under-different-devices",
					"item": [
						{
							"name": "TX1 and TX2",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID2', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify XR1",
							"item": [
								{
									"name": "Check - if does not exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (inside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify XR2",
							"item": [
								{
									"name": "Check - if does not exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface_upd}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (inside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check ",
							"item": [
								{
									"name": "Check - xr1's if does not exist inside of TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - xr2's if does not exist inside of TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of proper TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of proper TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Commit",
							"item": [
								{
									"name": "Commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Attempt commit of xr1 inside of improper TXID2 (which is relative to xr2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include('\"' + pm.environment.get(\"node_id\") + \"_1\" + '\"');",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node2_id\"));",
													"});",
													"",
													"console.log(\"Commit intentionally all modified nodes not only that one which is listed....\");",
													"console.log(\"It can appear strange that in input we ask one device (not modified in frame of this TX) and in output we get other (modified in frame of this TX) as commited.\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Repeated attempt commit of xr1 inside of improper TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node2_id\"));",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Repeated commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								}
							]
						},
						{
							"name": "Check  outside of TXID (they do exist)",
							"item": [
								{
									"name": "Check - if exists (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node_id}}_1",
												"yang-ext:mount",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node2_id}}/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node2_id}}",
												"yang-ext:mount",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check",
							"item": [
								{
									"name": "Attempt to read inside of TXID2 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attempt to read inside of TXID1 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 02-Modification-of-different-sub-trees-under-single-device",
					"item": [
						{
							"name": "TX1 and TX2",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID2', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify XR1",
							"item": [
								{
									"name": "Check - if does not exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (inside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify XR1 - other subtree",
							"item": [
								{
									"name": "Check - if does not exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface_upd}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (inside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Check ",
							"item": [
								{
									"name": "Check - xr1's if does not exist inside of TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - xr2's if does not exist inside of TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of proper TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of proper TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Commit",
							"item": [
								{
									"name": "Commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Repeated commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:fail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"",
													"pm.test(\"error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"error-message\"]).to.eql(\"Uniconfig node \" + pm.environment.get(\"node_id\")  + \"_1 has been modified by other transaction.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Repeated attempt commit of xr1 inside of proper TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								}
							]
						},
						{
							"name": "Check  outside of TXID (they do not exist)",
							"item": [
								{
									"name": "Check - if exists (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node_id}}_1",
												"yang-ext:mount",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node_id}}_1",
												"yang-ext:mount",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check",
							"item": [
								{
									"name": "Attempt to read inside of TXID2 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attempt to read inside of TXID1 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 03-Modification-of-conflicting-sub-trees-under-single-device",
					"item": [
						{
							"name": "Prepare conflicting object",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Check - if exists (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node_id}}_1",
												"yang-ext:mount",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TX1 and TX2",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID2', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify loopback desc in TX1",
							"item": [
								{
									"name": "Check - if does exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"stanov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"ferov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if was changed (inside of TXID1, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"ferov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if was not changed (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"stanov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify loopback desc in TX2",
							"item": [
								{
									"name": "Check - if does exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"stanov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"lacov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if was changed (inside of TXID2, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"lacov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if was not changed (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"stanov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Commit",
							"item": [
								{
									"name": "Commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});",
													"",
													"//console.warn(\"Why there is not specified node_id in the response - node-result section?\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Repeated attempt commit of xr1 inside of proper TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:fail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"",
													"pm.test(\"error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"error-message\"]).to.eql(\"Uniconfig node \" + pm.environment.get(\"node_id\")  + \"_1 has been modified by other transaction.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Repeated commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								}
							]
						},
						{
							"name": "Check  outside of TXID (they do not exist)",
							"item": [
								{
									"name": "Check - if changed in first commited TX=TXID2 (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"lacov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if changed in first commited TX=TXID2 (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"lacov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if changed in first commited TX=TXID2 (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"description\"]).to.include(\"lacov\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node_id}}_1",
												"yang-ext:mount",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check",
							"item": [
								{
									"name": "Attempt to read inside of TXID2 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attempt to read inside of TXID1 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 04-Creation-of-template-inside-transaction",
					"item": [
						{
							"name": "TX1 and TX2",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID2', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create template",
							"item": [
								{
									"name": "find schema-cache-directory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"get cache_dir env variable\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
													"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1757284974\") {",
													"        console.log(\"looks good\");",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=topology-netconf",
												"node={{node_id}}_1",
												"netconf-node-topology:schema-cache-directory"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "create template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
												"vrf=%7B%24vrf-var%7D"
											],
											"query": [
												{
													"key": "uniconfig-schema-repository",
													"value": "{{cache_dir}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "read template inside TX1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template1"
											]
										}
									},
									"response": []
								},
								{
									"name": "read template inside TX2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template1"
											]
										}
									},
									"response": []
								},
								{
									"name": "read template outside any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template1"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Commit",
							"item": [
								{
									"name": "Commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body dose not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Repeated commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								}
							]
						},
						{
							"name": "Check",
							"item": [
								{
									"name": "read template inside TX2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template1"
											]
										}
									},
									"response": []
								},
								{
									"name": "read template outside any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template1"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Check",
							"item": [
								{
									"name": "Attempt to read inside of TXID1 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "TX2 is not closed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:close-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:close-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attempt to read inside of TXID2 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 05-Modification-of-multiple-devices-inside-single-transaction",
					"item": [
						{
							"name": "TX1",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create template",
							"item": [
								{
									"name": "find schema-cache-directory WHY DOES NOT WORK?",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=topology-netconf",
												"node={{node_id}}_1",
												"netconf-node-topology:schema-cache-directory"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find schema-cache-directory Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"get cache_dir env variable\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=topology-netconf",
												"node={{node_id}}_1",
												"netconf-node-topology:schema-cache-directory"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "create template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template2",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
												"vrf=%7B%24vrf-var%7D"
											],
											"query": [
												{
													"key": "uniconfig-schema-repository",
													"value": "{{cache_dir}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "read template inside TX1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template2",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template2"
											]
										}
									},
									"response": []
								},
								{
									"name": "read template outside any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template2",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template2"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Apply template inside of TX",
							"item": [
								{
									"name": "apply not commited template2 inside of TX on both XRs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_1.template2\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node2_id}}\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										},
										"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
									},
									"response": []
								},
								{
									"name": "show xr1 (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check vrf name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "show xr2 (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check vrf name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Modify XR2",
							"item": [
								{
									"name": "Check - if does not exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface_upd}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (inside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Commit",
							"item": [
								{
									"name": "Commit all nodes inside of TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node2_id\"));",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": [
										{
											"name": "FAIL also close the transaction ....",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"operations",
														"uniconfig-manager:commit"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 25 Mar 2021 10:57:17 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/yang-data+json"
												},
												{
													"key": "Content-Length",
													"value": "565"
												},
												{
													"key": "Server",
													"value": "Jetty(9.4.12.v20180830)"
												}
											],
											"cookie": [],
											"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"xr6\",\n                    \"configuration-status\": \"fail\",\n                    \"error-message\": \"RemoteDevice{xr6}: Confirmed commit failed. 'RSI' detected the 'fatal' condition 'The specified SAFI is unsupported'\\n\",\n                    \"error-type\": \"processing-error\",\n                    \"rollback-status\": \"complete\"\n                },\n                {\n                    \"node-id\": \"xr6_2\",\n                    \"configuration-status\": \"fail\",\n                    \"error-message\": \"RemoteDevice{xr6_2}: Confirmed commit failed. 'RSI' detected the 'fatal' condition 'The specified SAFI is unsupported'\\n\",\n                    \"error-type\": \"processing-error\",\n                    \"rollback-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"fail\"\n    }\n}"
										}
									]
								},
								{
									"name": "Repeated commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								}
							]
						},
						{
							"name": "Check  outside of TXID (they do not exist)",
							"item": [
								{
									"name": "Commit all nodes outside of any TX to reflect changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"/*pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node2_id\"));",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": [
										{
											"name": "FAIL also close the transaction ....",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"operations",
														"uniconfig-manager:commit"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 25 Mar 2021 10:57:17 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/yang-data+json"
												},
												{
													"key": "Content-Length",
													"value": "565"
												},
												{
													"key": "Server",
													"value": "Jetty(9.4.12.v20180830)"
												}
											],
											"cookie": [],
											"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"xr6\",\n                    \"configuration-status\": \"fail\",\n                    \"error-message\": \"RemoteDevice{xr6}: Confirmed commit failed. 'RSI' detected the 'fatal' condition 'The specified SAFI is unsupported'\\n\",\n                    \"error-type\": \"processing-error\",\n                    \"rollback-status\": \"complete\"\n                },\n                {\n                    \"node-id\": \"xr6_2\",\n                    \"configuration-status\": \"fail\",\n                    \"error-message\": \"RemoteDevice{xr6_2}: Confirmed commit failed. 'RSI' detected the 'fatal' condition 'The specified SAFI is unsupported'\\n\",\n                    \"error-type\": \"processing-error\",\n                    \"rollback-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"fail\"\n    }\n}"
										}
									]
								},
								{
									"name": "Check - if exists (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface_upd\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node2_id}}/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node2_id}}",
												"yang-ext:mount",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check template outside of TXID",
							"item": [
								{
									"name": "read template2 inside TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template2",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template2"
											]
										}
									},
									"response": []
								},
								{
									"name": "read template2 outside any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check template name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_1.template2\");",
													"    pm.expect(jsonData[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(\"{$vrf-var}\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template2",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template2"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Check applied template changes outside TX",
							"item": [
								{
									"name": "show xr1 (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check vrf name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "show xr1 (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check vrf name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check xr1 (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check vrf name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1/yang-ext:mount/Cisco-IOS-XR-infra-rsi-cfg:vrfs",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node_id}}_1",
												"yang-ext:mount",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
											]
										}
									},
									"response": []
								},
								{
									"name": "show xr2 (nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check vrf name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "show xr2 (config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check vrf name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check xr2 (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check vrf name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node2_id}}/yang-ext:mount/Cisco-IOS-XR-infra-rsi-cfg:vrfs",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node2_id}}",
												"yang-ext:mount",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Check",
							"item": [
								{
									"name": "Attempt to read inside of TXID1 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 06-Trying-to-use-already-closed-transaction",
					"item": [
						{
							"name": "TX1",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify XR1",
							"item": [
								{
									"name": "Check - if does not exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (inside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Close TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:close-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:close-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Close TX",
							"item": [
								{
									"name": "Attempt to read inside of TXID1 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface_upd}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface_upd}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Commit",
							"item": [
								{
									"name": "Commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1 will fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID1\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 07-Trying-to-modify-uniconfig-or-template-node-outside-uniconfig-transaction",
					"item": [
						{
							"name": "Modify XR1 outside TX - should fail NOW IT IS ALLOWED",
							"item": [
								{
									"name": "Check - if does not exist (outside of TXID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback - outside of TX Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Altering of data is not allowed in shared-transaction. Please generate transaction-id and use it in the requests or disable uniconfig-transactions.\");",
													"});*/",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (outside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if DOES! exist (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Modify XR1 outside TX - should fail",
													"//at first it was failing",
													"//pm.test(\"Status code is 404\", function () {",
													"//    pm.response.to.have.status(404);",
													"//});",
													"//",
													"//Modify XR1 outside TX - should fail",
													"//at first it was failing",
													"//pm.test(\"error message present\", function () {",
													"//    var jsonData = pm.response.json();",
													"//    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"//});",
													"",
													"//Modify XR1 outside TX - will not fail",
													"//now rules were relaxed - even in frame of shared transactions is allowed to modify device",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit outside of any TXID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Check - if does not exist (outside of TXID, nonconfig) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if DOES! exist (outside of TXID, config) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Modify XR1 outside TX - should fail",
													"//at first it was failing",
													"//pm.test(\"Status code is 404\", function () {",
													"//    pm.response.to.have.status(404);",
													"//});",
													"//",
													"//Modify XR1 outside TX - should fail",
													"//at first it was failing",
													"//pm.test(\"error message present\", function () {",
													"//    var jsonData = pm.response.json();",
													"//    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Request could not be completed because the relevant data model content does not exist\");",
													"//});",
													"",
													"//Modify XR1 outside TX - will not fail",
													"//now rules were relaxed - even in frame of shared transactions is allowed to modify device",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create template outside TX - should fail - NOW IT WORKS",
							"item": [
								{
									"name": "find schema-cache-directory nonconfig",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"get cache_dir env variable\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=topology-netconf",
												"node={{node_id}}_1",
												"netconf-node-topology:schema-cache-directory"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig",
													"description": "onn"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "create template outside TX - UNABLE TO RETRIEVE schema-cache-dir -DOES Not",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Altering of data is not allowed in shared-transaction. Please generate transaction-id and use it in the requests or disable uniconfig-transactions.\");",
													"});*/",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template3/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template3",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
												"vrf=%7B%24vrf-var%7D"
											],
											"query": [
												{
													"key": "uniconfig-schema-repository",
													"value": "{{cache_dir}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "read template outside any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"node-id\\\":\\\"\" + pm.environment.get(\"node_id\") + \"_1.template3\\\",\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template3",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template3"
											]
										}
									},
									"response": []
								},
								{
									"name": "read templates outside any TX - there are previously created ones",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"/*",
													"pm.test(\"Previous created template exists\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1.template1\");",
													"});",
													"",
													"pm.test(\"Previous created template exists\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1.template2\");",
													"});*/",
													"",
													"",
													"pm.test(\"Newly created template exists\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1.template3\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Modify template outside TX - should fail",
							"item": [
								{
									"name": "find schema-cache-directory DOES NOT WORK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"get cache_dir env variable\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=topology-netconf",
												"node={{node_id}}_1",
												"netconf-node-topology:schema-cache-directory"
											]
										}
									},
									"response": []
								},
								{
									"name": "modify template outside TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Altering of data is not allowed in shared-transaction. Please generate transaction-id and use it in the requests or disable uniconfig-transactions.\");",
													"});",
													"*/",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"MODIFIED\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template2",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
												"vrf=%7B%24vrf-var%7D"
											],
											"query": [
												{
													"key": "uniconfig-schema-repository",
													"value": "{{cache_dir}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "read template outside any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"MODIFIED\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template2",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template2"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Commit",
							"item": [
								{
									"name": "Commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 07a-Trying-to-modify-uniconfig-via-RPC",
					"item": [
						{
							"name": "RPC outside of TX - IT WORKS",
							"item": [
								{
									"name": "check interface in config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check interface in nonconfig",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check interface in config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check interface in nonconfig",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										},
										"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
									},
									"response": []
								},
								{
									"name": "commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "create-snapshot outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\" : \"snapshot1\",\n        \"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "delete iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										},
										"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										},
										"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
									},
									"response": []
								},
								{
									"name": "delete iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										},
										"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
									},
									"response": []
								},
								{
									"name": "commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "sync-from-network outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										},
										"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
									},
									"response": []
								},
								{
									"name": "replace-config-with-snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										},
										"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\",\"{{node2_id}}\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										},
										"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
									},
									"response": []
								},
								{
									"name": "commit outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "delete-snapshot outside of any TXID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\" : \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 07b-Trying-to-modify-uniconfig-via-apply-template",
					"item": [
						{
							"name": "Aplly template outside of TX - IT WORKS",
							"item": [
								{
									"name": "Apply template",
									"item": [
										{
											"name": "read template outside any TX",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"MODIFIED\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// create a cookie jar",
															"const cookieJar = pm.cookies.jar();",
															"",
															"// Delete the created cookie",
															"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
															"  if (error) {",
															"    console.error(`An error occurred: ${error}`);",
															"  }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template2",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=templates",
														"node={{node_id}}_1.template2"
													]
												}
											},
											"response": []
										},
										{
											"name": "apply template2 outside of TX on both XRs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"overall-status:complete\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_1.template2\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node2_id}}\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"operations",
														"template-manager:apply-template"
													]
												},
												"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
											},
											"response": []
										},
										{
											"name": "show xr1 (config)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"check vrf name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf2\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node_id}}_1",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
													],
													"query": [
														{
															"key": "content",
															"value": "config"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "show xr1 (nonconfig)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=nonconfig",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node_id}}_1",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
													],
													"query": [
														{
															"key": "content",
															"value": "nonconfig"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "show xr2 (config)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"check vrf name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node2_id}}",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
													],
													"query": [
														{
															"key": "content",
															"value": "config"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "show xr2 (nonconfig)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=nonconfig",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node2_id}}",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
													],
													"query": [
														{
															"key": "content",
															"value": "nonconfig"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "commit outside of any TXID Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"overall-status:complete\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// create a cookie jar",
															"const cookieJar = pm.cookies.jar();",
															"",
															"// Delete the created cookie",
															"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
															"  if (error) {",
															"    console.error(`An error occurred: ${error}`);",
															"  }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}_1\"]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"operations",
														"uniconfig-manager:commit"
													]
												},
												"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
											},
											"response": []
										},
										{
											"name": "del xr1 (config)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node_id}}_1",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
													]
												}
											},
											"response": []
										},
										{
											"name": "del xr2 (config)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "username",
															"value": "admin",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node2_id}}",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 08-Trying-to-read-uniconfig-template-node-outside-uniconfig-transaction",
					"item": [
						{
							"name": "read uniconfig node",
							"item": [
								{
									"name": "read interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "read template node",
							"item": [
								{
									"name": "read template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Previous created template exists\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1.template1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_1.template1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=templates",
												"node={{node_id}}_1.template1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 09-Trying-to-read-modify-some-data-outside-uniconfig-transaction-and-not-under-uniconfig-or-template-node",
					"item": [
						{
							"name": "TX1",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Make node to be mounted",
							"item": [
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Show connection status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 60000);",
													"",
													"//console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}_1\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:show-connection-status",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:show-connection-status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Read under topologies",
							"item": [
								{
									"name": "explicit mount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 60000);",
													"",
													"//console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"node-id\": \"{{node_id}}_1\",\n    \"max-connection-attempts\": 0,\n    \"connection-type\": \"netconf\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:mount-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:mount-node"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show connection status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 60000);",
													"",
													"//console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:show-connection-status",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:show-connection-status"
											]
										}
									},
									"response": []
								},
								{
									"name": "topology-netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node_id}}_1"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "unified",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node={{node_id}}_1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id}}",
												"node={{node_id}}_1"
											]
										}
									},
									"response": []
								},
								{
									"name": "explicit unmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 60000);",
													"",
													"//console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"node-id\": \"{{node_id}}_1\",\n    \"connection-type\": \"netconf\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:unmount-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:unmount-node"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TX1 Copy",
							"item": [
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Make node to be mounted Copy",
							"item": [
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Show connection status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, 60000);",
													"",
													"//console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.unset(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:show-connection-status",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:show-connection-status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify TODO",
							"item": []
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 10-Trying-to-use-non-existing-transaction",
					"item": [
						{
							"name": "Read inside of TX",
							"item": [
								{
									"name": "Send request with TXID cookie set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Unknown uniconfig transaction:\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Cookie saved: UNICONFIGTXID=5825603a-8bc9-4cda-9632-37a7cae5409e; Path=/rest",
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", \"5825603a-8bc9-4cda-9632-37a7cae5409e\", (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=5825603a-8bc9-4cda-9632-37a7cae5409e\");",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 11-Trying-to-close-non-existing-transaction",
					"item": [
						{
							"name": "CLose TX",
							"item": [
								{
									"name": "Close non existing TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Unknown uniconfig transaction:\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Cookie saved: UNICONFIGTXID=5825603a-8bc9-4cda-9632-37a7cae5409e; Path=/rest",
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", \"5825603a-8bc9-4cda-9632-37a7cae5409e\", (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=5825603a-8bc9-4cda-9632-37a7cae5409e\");",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:close-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:close-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Erase TX cookie",
							"item": [
								{
									"name": "Check node configuration outside of any TX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UC transactions 20-test-transactionLogSize-3",
					"item": [
						{
							"name": "Modify in TX1",
							"item": [
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}1\",\n            \"description\": \"stanov loopback{{TXID1}}\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TX1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Check - if exists (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (outside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (yang-ext)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_netconf}}",
												"node={{node_id}}_1",
												"yang-ext:mount",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit - to get if and tx log up to date in shared tx Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Check - if exists (outside of TXID, nonconfig)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (outside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check tx log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"check the first record in transaction log\", function () {",
													"    pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"][0][\"transaction-id\"]).to.eql(pm.environment.get(\"TXID1\"));",
													"});",
													"",
													"pm.test(\"Check expected transactions are present in tx log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID1\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID1\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transactions-metadata?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transactions-metadata"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Modify in TX2",
							"item": [
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID2', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}2\",\n            \"description\": \"stanov loopback{{TXID2}}\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}2",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"2\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}2?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}2"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TX2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit - to get if and tx log up to date in shared tx",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "check tx log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"check the first record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID1\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID1\"));",
													"});",
													"",
													"pm.test(\"check the second record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID2\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transactions-metadata?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transactions-metadata"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Modify in TX3",
							"item": [
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID3', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID3=\"+pm.environment.get(\"TXID3\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}3\",\n            \"description\": \"stanov loopback{{TXID3}}\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}3",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"3\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}3?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}3"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TX3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit - to get if and tx log up to date in shared tx",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "check tx log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"check the first record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID1\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID1\"));",
													"});",
													"",
													"pm.test(\"check the second record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID2\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID2\"));",
													"});",
													"",
													"pm.test(\"check the third record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID3\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID3\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transactions-metadata?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transactions-metadata"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Modify in TX4",
							"item": [
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID4', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID4=\"+pm.environment.get(\"TXID4\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}4\",\n            \"description\": \"stanov loopback{{TXID4}}\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"4\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}4?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}4"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TX4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Commit - to get if and tx log up to date in shared tx",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "check tx log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"check the first record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID1\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID1\"));",
													"});",
													"",
													"pm.test(\"check the second record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID2\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID2\"));",
													"});",
													"",
													"pm.test(\"check the third record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID3\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID3\"));",
													"});",
													"",
													"pm.test(\"check the fourth record in transaction log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID4\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID4\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transactions-metadata?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transactions-metadata"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": [
										{
											"name": "Check",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=nonconfig",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node_id}}_1",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
													],
													"query": [
														{
															"key": "content",
															"value": "nonconfig"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 22 Apr 2021 11:30:12 GMT"
												},
												{
													"key": "Set-Cookie",
													"value": "JSESSIONID=node018elz53civ97g10z3yub3obv6i20.node0;Path=/"
												},
												{
													"key": "Set-Cookie",
													"value": "rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Wed, 21-Apr-2021 11:30:12 GMT"
												},
												{
													"key": "Expires",
													"value": "Thu, 01 Jan 1970 00:00:00 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "849"
												},
												{
													"key": "Server",
													"value": "Jetty(9.4.12.v20180830)"
												}
											],
											"cookie": [],
											"body": "{\n    \"Cisco-IOS-XR-ifmgr-cfg:interface-configurations\": {\n        \"interface-configuration\": [\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/4\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/3\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/2\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/1\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"Loopback97\",\n                \"description\": \"lacov loopback\",\n                \"interface-virtual\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/0\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"MgmtEth0/0/CPU0/0\",\n                \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                    \"addresses\": {\n                        \"primary\": {\n                            \"address\": \"192.168.1.211\",\n                            \"netmask\": \"255.255.255.0\"\n                        }\n                    }\n                }\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"Loopback102\",\n                \"description\": \"\\\"nooooooo\\\"\",\n                \"interface-virtual\": [\n                    null\n                ]\n            }\n        ]\n    }\n}"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Delete created loopbacks",
							"item": [
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "del loopback1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											]
										}
									},
									"response": []
								},
								{
									"name": "del loopback2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}2",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}2"
											]
										}
									},
									"response": []
								},
								{
									"name": "del loopback3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}3",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}3"
											]
										}
									},
									"response": []
								},
								{
									"name": "del loopback4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of TX1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"no Loopback configured\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"Loopback\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": [
										{
											"name": "Check",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=nonconfig",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node_id}}_1",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
													],
													"query": [
														{
															"key": "content",
															"value": "nonconfig"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 22 Apr 2021 11:30:12 GMT"
												},
												{
													"key": "Set-Cookie",
													"value": "JSESSIONID=node018elz53civ97g10z3yub3obv6i20.node0;Path=/"
												},
												{
													"key": "Set-Cookie",
													"value": "rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Wed, 21-Apr-2021 11:30:12 GMT"
												},
												{
													"key": "Expires",
													"value": "Thu, 01 Jan 1970 00:00:00 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "849"
												},
												{
													"key": "Server",
													"value": "Jetty(9.4.12.v20180830)"
												}
											],
											"cookie": [],
											"body": "{\n    \"Cisco-IOS-XR-ifmgr-cfg:interface-configurations\": {\n        \"interface-configuration\": [\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/4\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/3\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/2\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/1\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"Loopback97\",\n                \"description\": \"lacov loopback\",\n                \"interface-virtual\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/0\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"MgmtEth0/0/CPU0/0\",\n                \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                    \"addresses\": {\n                        \"primary\": {\n                            \"address\": \"192.168.1.211\",\n                            \"netmask\": \"255.255.255.0\"\n                        }\n                    }\n                }\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"Loopback102\",\n                \"description\": \"\\\"nooooooo\\\"\",\n                \"interface-virtual\": [\n                    null\n                ]\n            }\n        ]\n    }\n}"
										}
									]
								},
								{
									"name": "Commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"no Loopback configured\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"Loopback\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": [
										{
											"name": "Check",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=nonconfig",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"rests",
														"data",
														"network-topology:network-topology",
														"topology=uniconfig",
														"node={{node_id}}_1",
														"frinx-uniconfig-topology:configuration",
														"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
													],
													"query": [
														{
															"key": "content",
															"value": "nonconfig"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 22 Apr 2021 11:30:12 GMT"
												},
												{
													"key": "Set-Cookie",
													"value": "JSESSIONID=node018elz53civ97g10z3yub3obv6i20.node0;Path=/"
												},
												{
													"key": "Set-Cookie",
													"value": "rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Wed, 21-Apr-2021 11:30:12 GMT"
												},
												{
													"key": "Expires",
													"value": "Thu, 01 Jan 1970 00:00:00 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "849"
												},
												{
													"key": "Server",
													"value": "Jetty(9.4.12.v20180830)"
												}
											],
											"cookie": [],
											"body": "{\n    \"Cisco-IOS-XR-ifmgr-cfg:interface-configurations\": {\n        \"interface-configuration\": [\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/4\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/3\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/2\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/1\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"Loopback97\",\n                \"description\": \"lacov loopback\",\n                \"interface-virtual\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"GigabitEthernet0/0/0/0\",\n                \"shutdown\": [\n                    null\n                ]\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"MgmtEth0/0/CPU0/0\",\n                \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                    \"addresses\": {\n                        \"primary\": {\n                            \"address\": \"192.168.1.211\",\n                            \"netmask\": \"255.255.255.0\"\n                        }\n                    }\n                }\n            },\n            {\n                \"active\": \"act\",\n                \"interface-name\": \"Loopback102\",\n                \"description\": \"\\\"nooooooo\\\"\",\n                \"interface-virtual\": [\n                    null\n                ]\n            }\n        ]\n    }\n}"
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "UC transactions 21-test-maxTransactionAge",
					"item": [
						{
							"name": "TX1 and TX2  (T=0)",
							"item": [
								{
									"name": "delete cookie (T=0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID1', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								},
								{
									"name": "create TXID2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Cookie UNICONFIGTXID is present\", () => {",
													"  pm.expect(pm.cookies.has('UNICONFIGTXID')).to.be.true;",
													"});",
													"",
													"pm.environment.set('TXID2', pm.cookies.get('UNICONFIGTXID'));",
													"",
													"console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:create-transaction",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:create-transaction"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify in TX1",
							"item": [
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}1\",\n            \"description\": \"stanov loopback{{TXID1}}\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Modify in TX2",
							"item": [
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create iosxr interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}2\",\n            \"description\": \"stanov loopback{{TXID2}}\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}2",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists (inside of TXID, config)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"2\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}2?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}2"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "check  (T=30)",
							"item": [
								{
									"name": "delete cookie (T=30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 30000);",
													"",
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check TX (T=45)",
							"item": [
								{
									"name": "delete cookie (T=45)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 15000);",
													"",
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists inside of TX1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID1\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID1=\"+pm.environment.get(\"TXID1\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}1?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}1"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TX1 (after 45s)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "check tx log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check expected transactions are present in tx log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID1\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID1\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transactions-metadata?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transactions-metadata"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "delete cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists inside of TX2 (after 45s)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"interface present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.include(pm.environment.get(\"test_interface\") + \"2\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}2?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}2"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check TX (T=70)",
							"item": [
								{
									"name": "delete cookie (T=70)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 25000);",
													"",
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check - if exists inside of TX2 - failure after 75s",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// create a cookie",
													"cookieJar.set(pm.environment.get(\"odl_ip\") + \"/rests/\", \"UNICONFIGTXID\", pm.environment.get(\"TXID2\"), (error, cookie) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  } else {",
													"    console.log(`Cookie saved: ${cookie}`);",
													"    console.log(\"TXID2=\"+pm.environment.get(\"TXID2\"));",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node2_id}}/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}2?content=config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node2_id}}",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}2"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit all nodes inside of proper TX2 - failure after 75s",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"error message present\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors.error[0][\"error-message\"]).to.include(\"Uniconfig transaction \" + pm.environment.get(\"TXID2\") + \" has already been closed\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "check tx log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check expected transactions are present in tx log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID1\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID1\"));",
													"});",
													"",
													"pm.test(\"TX2 not in transaction log\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"TXID2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transactions-metadata?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transactions-metadata"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check TX (T=100s)",
							"item": [
								{
									"name": "delete cookie (T=100s)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 30000);",
													"",
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,{{test_interface}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node={{node_id}}_1",
												"frinx-uniconfig-topology:configuration",
												"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
												"interface-configuration=act,{{test_interface}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check tx log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check expected transactions are present in tx log\", () => {",
													"  pm.expect(jsonData[\"transactions-metadata\"][\"transaction-metadata\"]).not.to.be.empty;",
													"",
													"  const tmd_objekt = jsonData[\"transactions-metadata\"][\"transaction-metadata\"].find",
													"      (m => m[\"transaction-id\"] === pm.environment.get(\"TXID1\"));",
													"  pm.expect(tmd_objekt).to.be.an(\"object\", \"Could not find the record for tx id=\" + pm.environment.get(\"TXID1\"));",
													"});",
													"",
													"pm.test(\"TX2 not in transaction log\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"TXID2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transactions-metadata?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transactions-metadata"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "All-UC transactions Teardown",
					"item": [
						{
							"name": "XR6-netconf Unmount uniconfig-native",
							"item": [
								{
									"name": "Uninstall IOS XR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate complete\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}_1\",\n        \"connection-type\": \"netconf\"\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:uninstall-node"
											]
										}
									},
									"response": []
								},
								{
									"name": "Install IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate complete\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}_1\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{xr_ip}}\",\n            \"cli-topology:port\": \"{{cli_port}}\",\n            \"cli-topology:transport-type\": \"{{protocol}}\",\n            \"cli-topology:device-type\": \"ios xr\",\n            \"cli-topology:device-version\": \"{{version_device}}\",\n            \"cli-topology:username\": \"{{username}}\",\n            \"cli-topology:password\": \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"cli-topology:dry-run-journal-size\": 150,\n            \"node-extension:reconcile\": false\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:install-node"
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore empty config xr6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Config replaced\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}_1/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"network-topology:network-topology",
												"topology={{topology_id_cli}}",
												"node={{node_id}}_1",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit to secure unmount of the device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node2_id\"));",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Uninstall IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate complete\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}_1\",\n        \"connection-type\": \"cli\"\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:uninstall-node"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "XR6-netconf Unmount uniconfig-native 2",
							"item": [
								{
									"name": "Uninstall IOS XR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate complete\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node2_id}}\",\n        \"connection-type\": \"netconf\"\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:uninstall-node"
											]
										}
									},
									"response": []
								},
								{
									"name": "Install IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate complete\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// create a cookie jar",
													"const cookieJar = pm.cookies.jar();",
													"",
													"// Delete the created cookie",
													"cookieJar.clear(pm.environment.get(\"odl_ip\") + \"/rests/\", (error) => {",
													"  if (error) {",
													"    console.error(`An error occurred: ${error}`);",
													"  }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node2_id}}\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{xr2_ip}}\",\n            \"cli-topology:port\": \"{{cli_port}}\",\n            \"cli-topology:transport-type\": \"{{protocol}}\",\n            \"cli-topology:device-type\": \"ios xr\",\n            \"cli-topology:device-version\": \"{{version_device}}\",\n            \"cli-topology:username\": \"{{username}}\",\n            \"cli-topology:password\": \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"cli-topology:dry-run-journal-size\": 150,\n            \"node-extension:reconcile\": false\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:install-node"
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore empty config xr6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Config replaced\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node2_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"network-topology:network-topology",
												"topology={{topology_id_cli}}",
												"node={{node2_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit to secure unmount of the device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node2_id\"));",
													"});",
													"",
													"pm.test(\"Body does not match string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": []\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										},
										"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
									},
									"response": []
								},
								{
									"name": "Uninstall IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate complete\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node2_id}}\",\n        \"connection-type\": \"cli\"\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"connection-manager:uninstall-node"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}