{
	"info": {
		"_postman_id": "605ab4ae-aaa5-484f-a247-9345746c8007",
		"name": "pc_unative_RPC_copy_one_to_many",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR5 RPC copy-one-to-many",
			"item": [
				{
					"name": "XR5 RPC copy-one-to-many Setup",
					"item": [
						{
							"name": "mount XR5 cli R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    [{\n      \"network-topology:node-id\" : \"R1\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n  \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150\n    }]\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected R1');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=R1",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available R1');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount XR5 cli R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    [{\n      \"network-topology:node-id\" : \"R2\",\n      \n      \"cli-topology:host\" : \"{{xr2_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n  \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150\n    }]\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected R2');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=R2",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available R2');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure interface description on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:description\": \"temp description\"\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface description exists on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "XR5 RPC copy-one-to-many Teardown",
					"item": [
						{
							"name": "unmount R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=R1",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted CLI R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=R2",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted CLI R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "RPC copy-one-to-many success",
					"item": [
						{
							"name": "copy R1 Gig1 description to R2 Gig2 and Gig0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {       ",
											"     pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\" : \"replace\",\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:description\"],\n        \"target-paths\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F2/frinx-openconfig-interfaces:config\", \"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F0/frinx-openconfig-interfaces:config\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-one-to-many",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-one-to-many"
									]
								}
							},
							"response": []
						},
						{
							"name": "check description exists on Gig0 R2 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F0/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F0",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check description exists on Gig2 R2 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F2/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F2",
										"config",
										"description"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC copy-one-to-many failed",
					"item": [
						{
							"name": "copy R1 Gig1 description to R2 Gig2 and Gig0 (wrong target paths)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() { ",
											"    pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											"    pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.contain(\"Failed to find schema node with identifier \");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\" : \"replace\",\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:description\"],\n        \"target-paths\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F2\", \"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F0\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-one-to-many",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-one-to-many"
									]
								}
							},
							"response": []
						},
						{
							"name": "check non existing description on Gig0 R2 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F0/config/description?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F0",
										"config",
										"description"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check non existing description on Gig2 R2 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F2/config/description?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F2",
										"config",
										"description"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}
