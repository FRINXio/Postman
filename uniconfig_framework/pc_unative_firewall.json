{
	"info": {
		"_postman_id": "c5c88aae-bf33-4362-8e7e-d9c4de13c021",
		"name": "pc_unative_firewall",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Junos",
			"item": [
				{
					"name": "Junos17-FIREWALL Setup",
					"item": [
						{
							"name": "install junos",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"junos\",\n        \"cli\": {\n            \"cli-topology:host\" : \"{{junos_ip}}\",\n            \"cli-topology:port\" : \"{{topology_port}}\",\n            \"cli-topology:transport-type\" : \"{{protocol}}\",\n            \"cli-topology:device-type\" : \"junos\",\n            \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n            \"cli-topology:username\" : \"{{username}}\",\n            \"cli-topology:password\" : \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"uniconfig-config:install-uniconfig-node-enabled\": false\n        },\n        \"netconf\": {\n            \"netconf-node-topology:host\": {{junos_ip}},\n            \"netconf-node-topology:port\": 830,\n            \"netconf-node-topology:keepalive-delay\": 0,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:dry-run-journal-size\": 100\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": [
								{
									"name": "CLEAR CONFIG",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override initial_configuration.txt\ncommit\nexit\n\"\n  }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"output\": \"configure \\r\\nEntering configuration mode\\r\\n\\r\\n[edit]\\r\\nroot# load override initial_configuration.txt \\r\\n|\\bcommit\\r\\nexit\\r\\nload complete\\r\\n\\r\\n[edit]\\r\\nroot# commit \\r\\ncommit complete\\r\\n\\r\\n[edit]\\r\\nroot# exit \\r\\nExiting configuration mode\\r\\n\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful sync-from-network request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Status of node\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Junos17-FIREWALL Teardown",
					"item": [
						{
							"name": "Clear Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": [
								{
									"name": "CLEAR CONFIG",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override initial_configuration.txt\ncommit\nexit\n\"\n  }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"output\": \"configure \\r\\nEntering configuration mode\\r\\n\\r\\n[edit]\\r\\nroot# load override initial_configuration.txt \\r\\n|\\bcommit\\r\\nexit\\r\\nload complete\\r\\n\\r\\n[edit]\\r\\nroot# commit \\r\\ncommit complete\\r\\n\\r\\n[edit]\\r\\nroot# exit \\r\\nExiting configuration mode\\r\\n\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Status of node\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=15ig9foo4u35316qiuzyly0i6g;Path=/restconf"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/restconf; Max-Age=0; Expires=Thu, 23-Apr-2020 15:42:29 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "uninstall junos",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}\",\n        \"connection-type\": \"cli\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/rests/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Junos Firewall",
					"item": [
						{
							"name": "Configure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n\tset firewall filter FILTER-01 term T2 then discard\n\tset firewall filter FILTER-01 term T2 from icmp-type echo-reply\n\tset firewall filter FILTER-01 term T3 then accept\n\tset firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32\n\tset firewall filter FILTER-01 term T3 from protocol tcp\n\tset firewall filter FILTER-01 term T1 then accept\n\tset firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32\n\tset firewall filter FILTER-01 interface-shared\n\tset firewall filter FILTER-01 fast-lookup-filter\n\tset firewall family inet6 filter FILTER-03 term TX filter FILTER-02\n\tset firewall family inet6 filter FILTER-02 term rule-1 then discard\n\tset firewall family inet6 filter FILTER-02 term rule-1 then log\n\tset firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128\n\tset firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128\n\tset firewall family inet6 filter FILTER-02 term rule-1 from port snmp\n\tset firewall family inet6 filter FILTER-02 term rule-2 then accept\n\tset firewall family inet6 filter FILTER-02 term rule-2 from icmp-code address-unreachable\n\tcommit\n\texit\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": [
								{
									"name": "SET INIT CONFIG",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset firewall filter FILTER-01 term T2 then discard\nset firewall filter FILTER-01 term T2 from icmp-type echo-reply\nset firewall filter FILTER-01 term T3 then accept\nset firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32\nset firewall filter FILTER-01 term T3 from protocol tcp\nset firewall filter FILTER-01 term T1 then accept\nset firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32\nset firewall filter FILTER-01 interface-shared\nset firewall filter FILTER-01 fast-lookup-filter\nset firewall family inet6 filter FILTER-03 term TX filter FILTER-02\nset firewall family inet6 filter FILTER-02 term rule-1 then discard\nset firewall family inet6 filter FILTER-02 term rule-1 then log\nset firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128\nset firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128\nset firewall family inet6 filter FILTER-02 term rule-1 from port snmp\nset firewall family inet6 filter FILTER-02 term rule-2 then accept\nset firewall family inet6 filter FILTER-02 term rule-2 from icmp-code address-unreachable\ncommit\nexit\n\"\n  }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"output\": \"configure \\r\\nEntering configuration mode\\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 term T2 then discard \\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 term T2 from icmp-type echo-reply \\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 term T3 then accept \\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32 \\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 term T3 from protocol tcp \\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 term T1 then accept \\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32 \\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 interface-shared \\r\\n\\r\\n[edit]\\r\\nroot# set firewall filter FILTER-01 fast-lookup-filter \\r\\n\\r\\n[edit]\\r\\nroot# set firewall family inet6 filter FILTER-03 term TX filter FILTER-02 \\r\\n\\r\\n[edit]\\r\\nroot# set firewall family inet6 filter FILTER-02 term rule-1 then discard \\r\\n\\r\\n[edit]\\r\\nroot# set firewall family inet6 filter FILTER-02 term rule-1 then log \\r\\n\\r\\n[edit]\\r\\nroot# set firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128 \\r\\n\\r\\n[edit]\\r\\nroot# set firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128 \\r\\n\\r\\n[edit]\\r\\nroot# set firewall family inet6 filter FILTER-02 term rule-1 from port snmp \\r\\n\\r\\n[edit]\\r\\nroot# set firewall family inet6 filter FILTER-02 term rule-2 then accept \\r\\n\\r\\n[edit]\\r\\nroot# set firewall family inet6 filter FILTER-02 term rule-2 from icmp-code address-unreachable \\r\\n\\r\\n[edit]\\r\\nroot# commit \\r\\nexit\\r\\ncommit complete\\r\\n\\r\\n[edit]\\r\\nroot# exit \\r\\nExiting configuration mode\\r\\n\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=15ig9foo4u35316qiuzyly0i6g;Path=/restconf"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/restconf; Max-Age=0; Expires=Thu, 23-Apr-2020 15:42:29 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get synced data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"pm.test(\"Targeted Node \", function () {",
											"    pm.expect( pm.response.json()[\"node\"][0][\"node-id\"]).to.eql(\"junos\");",
											"});",
											"var result = pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"junos17-firewall-clinative:firewall\"][\"family\"][\"inet6\"][\"filter\"];",
											"",
											"pm.test(\"Evaluate Filter-03 \", function () {",
											"var found=false;",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"name\"] == \"FILTER-03\"){",
											"            pm.expect(result[i][\"name\"]).to.eql(\"FILTER-03\");",
											"            pm.expect(result[i][\"term\"][0][\"name\"]).to.eql(\"TX\");",
											"            pm.expect(result[i][\"term\"][0][\"filter\"]).to.eql(\"FILTER-02\");",
											"            found=true",
											"            break;",
											"         }",
											"      }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 03');",
											"});",
											"",
											"pm.test(\"Evaluate Filter-02 \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['rule-1','rule-2'];",
											"",
											"     for(var i = 0; i < result.length; i++){",
											"        if( result[i][\"name\"] == \"FILTER-02\"){",
											"            var term = result[i][\"term\"]",
											"            pm.expect(result[i][\"name\"]).to.eql(\"FILTER-02\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            expectedterms.forEach((s) => pm.expect(terms).to.contain(s));",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 02');",
											"",
											"});",
											"",
											"var filter = pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"junos17-firewall-clinative:firewall\"][\"filter\"];",
											"",
											"pm.test(\"Evaluate filter-01 \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['T1','T2','T3'];",
											"     for(var i = 0; i < filter.length; i++){",
											"        if( filter[i][\"name\"] == \"FILTER-01\"){",
											"            var term = filter[i][\"term\"]",
											"            pm.expect(filter[i][\"name\"]).to.eql(\"FILTER-01\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            expectedterms.forEach((s) => pm.expect(terms).to.contain(s));",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 02');",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET SYNCED DATA",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2013-10-21node\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:38"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"node\": [\n        {\n            \"node-id\": \"junos\",\n            \"frinx-uniconfig-topology:configuration\": {\n                \"junos17-firewall-clinative:firewall\": {\n                    \"filter\": [\n                        {\n                            \"name\": \"FILTER-01\",\n                            \"term\": [\n                                {\n                                    \"name\": \"T2\",\n                                    \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                                    \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T3\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T1\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                                }\n                            ],\n                            \"fast-lookup-filter\": [\n                                null\n                            ],\n                            \"interface-shared\": [\n                                null\n                            ]\n                        }\n                    ],\n                    \"family\": {\n                        \"inet6\": {\n                            \"filter\": [\n                                {\n                                    \"name\": \"FILTER-03\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"TX\",\n                                            \"filter\": \"FILTER-02\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"name\": \"FILTER-02\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"rule-1\",\n                                            \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                            \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                                        },\n                                        {\n                                            \"name\": \"rule-2\",\n                                            \"then\": \"accept;\",\n                                            \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get data from cli mountpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"var result = pm.response.json()[\"firewall\"][\"family\"][\"inet6\"][\"filter\"];",
											"",
											"pm.test(\"Evaluate Filter-03 \", function () {",
											"var found=false;",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"name\"] == \"FILTER-03\"){",
											"            pm.expect(result[i][\"name\"]).to.eql(\"FILTER-03\");",
											"            pm.expect(result[i][\"term\"][0][\"name\"]).to.eql(\"TX\");",
											"            pm.expect(result[i][\"term\"][0][\"filter\"]).to.eql(\"FILTER-02\");",
											"            found=true",
											"            break;",
											"         }",
											"      }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 03');",
											"});",
											"",
											"pm.test(\"Evaluate Filter-02 \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['rule-1','rule-2'];",
											"",
											"     for(var i = 0; i < result.length; i++){",
											"        if( result[i][\"name\"] == \"FILTER-02\"){",
											"            var term = result[i][\"term\"]",
											"            pm.expect(result[i][\"name\"]).to.eql(\"FILTER-02\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            expectedterms.forEach((s) => pm.expect(terms).to.contain(s));",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 02');",
											"",
											"});",
											"",
											"var filter = pm.response.json()[\"firewall\"][\"filter\"];",
											"",
											"pm.test(\"Evaluate filter-01 \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['T1','T2','T3'];",
											"     for(var i = 0; i < filter.length; i++){",
											"        if( filter[i][\"name\"] == \"FILTER-01\"){",
											"            var term = filter[i][\"term\"]",
											"            pm.expect(filter[i][\"name\"]).to.eql(\"FILTER-01\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            expectedterms.forEach((s) => pm.expect(terms).to.contain(s));",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 02');",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/junos17-firewall-clinative:firewall?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"junos17-firewall-clinative:firewall"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET DATA FROM CLI MOUNTPOINT",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/junos17-firewall-clinative:firewall?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"junos17-firewall-clinative:firewall"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-09firewall\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:54"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"firewall\": {\n        \"filter\": [\n            {\n                \"name\": \"FILTER-01\",\n                \"term\": [\n                    {\n                        \"name\": \"T2\",\n                        \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                        \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T3\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T1\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                    }\n                ],\n                \"fast-lookup-filter\": [\n                    null\n                ],\n                \"interface-shared\": [\n                    null\n                ]\n            }\n        ],\n        \"family\": {\n            \"inet6\": {\n                \"filter\": [\n                    {\n                        \"name\": \"FILTER-03\",\n                        \"term\": [\n                            {\n                                \"name\": \"TX\",\n                                \"filter\": \"FILTER-02\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"FILTER-02\",\n                        \"term\": [\n                            {\n                                \"name\": \"rule-1\",\n                                \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                            },\n                            {\n                                \"name\": \"rule-2\",\n                                \"then\": \"accept;\",\n                                \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Add new firewall rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"junos17-firewall-clinative:term\": [\n        {\n            \"name\": \"T4\",\n            \"then\": \"discard;\",\n            \"from\": \"{\\r\\n    destination-address {\\r\\n        1.2.3.0/24;\\r\\n    }\\r\\n    protocol udp;\\r\\n}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/term=T4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-firewall-clinative:firewall",
										"filter=FILTER-01",
										"term=T4"
									]
								}
							},
							"response": [
								{
									"name": "ADD NEW FIREWALL RULE",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"junos17-firewall-clinative:term\": [\n        {\n            \"name\": \"T4\",\n            \"then\": \"discard;\",\n            \"from\": \"{\\r\\n    destination-address {\\r\\n        1.2.3.0/24;\\r\\n    }\\r\\n    protocol udp;\\r\\n}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/term=T4",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos",
												"frinx-uniconfig-topology:configuration",
												"junos17-firewall-clinative:firewall",
												"filter=FILTER-01",
												"term=T4"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Content-Length",
											"value": "0"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete firewall option",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/interface-shared",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-firewall-clinative:firewall",
										"filter=FILTER-01",
										"interface-shared"
									]
								}
							},
							"response": [
								{
									"name": "DELETE FIREWALL OPTION",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/interface-shared",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos",
												"frinx-uniconfig-topology:configuration",
												"junos17-firewall-clinative:firewall",
												"filter=FILTER-01",
												"interface-shared"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete IPV6 firewall rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-03?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-firewall-clinative:firewall",
										"family",
										"inet6",
										"filter=FILTER-03"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "DELETE IPV6 FIREWALL RULE",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-03?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos",
												"frinx-uniconfig-topology:configuration",
												"junos17-firewall-clinative:firewall",
												"family",
												"inet6",
												"filter=FILTER-03"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update IPV6 term",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"junos17-firewall-clinative:from\": \"{\\r\\n    icmp-code port-unreachable;\\r\\n}\"\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-02/term=rule-2/from",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-firewall-clinative:firewall",
										"family",
										"inet6",
										"filter=FILTER-02",
										"term=rule-2",
										"from"
									]
								}
							},
							"response": [
								{
									"name": "UPDATE IPV6 TERM",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"junos17-firewall-clinative:from\": \"{\\r\\n    icmp-code port-unreachable;\\r\\n}\"\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-02/term=rule-2/from",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos",
												"frinx-uniconfig-topology:configuration",
												"junos17-firewall-clinative:firewall",
												"family",
												"inet6",
												"filter=FILTER-02",
												"term=rule-2",
												"from"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=1idndtjx2kr52tplufl6qezvx;Path=/rests"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/rests; Max-Age=0; Expires=Thu, 23-Apr-2020 15:54:47 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful calculate diff request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": [
								{
									"name": "CALCULATE DIFF",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"deleted-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-03\",\n                            \"data\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-03\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"TX\\\",\\n          \\\"filter\\\": \\\"FILTER-02\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\"\n                        }\n                    ],\n                    \"status\": \"complete\",\n                    \"created-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/term=T4\",\n                            \"data\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"T4\\\",\\n      \\\"then\\\": \\\"discard;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    destination-address {\\\\r\\\\n        1.2.3.0/24;\\\\r\\\\n    }\\\\r\\\\n    protocol udp;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\"\n                        }\n                    ],\n                    \"updated-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-02/term=rule-2\",\n                            \"data-actual\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"rule-2\\\",\\n      \\\"then\\\": \\\"accept;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    icmp-code address-unreachable;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\",\n                            \"data-intended\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"rule-2\\\",\\n      \\\"then\\\": \\\"accept;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    icmp-code network-unreachable;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\"\n                        },\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01\",\n                            \"data-actual\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-01\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"T2\\\",\\n          \\\"then\\\": \\\"{\\\\r\\\\n    discard;\\\\r\\\\n}\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    icmp-type echo-reply;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T3\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        172.16.2.1/32;\\\\r\\\\n    }\\\\r\\\\n    protocol tcp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T1\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        192.168.10.1/32;\\\\r\\\\n    }\\\\r\\\\n}\\\"\\n        }\\n      ],\\n      \\\"fast-lookup-filter\\\": [\\n        null\\n      ],\\n      \\\"interface-shared\\\": [\\n        null\\n      ]\\n    }\\n  ]\\n}\",\n                            \"data-intended\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-01\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"T4\\\",\\n          \\\"then\\\": \\\"discard;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    destination-address {\\\\r\\\\n        1.2.3.0/24;\\\\r\\\\n    }\\\\r\\\\n    protocol udp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T2\\\",\\n          \\\"then\\\": \\\"{\\\\r\\\\n    discard;\\\\r\\\\n}\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    icmp-type echo-reply;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T3\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        172.16.2.1/32;\\\\r\\\\n    }\\\\r\\\\n    protocol tcp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T1\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        192.168.10.1/32;\\\\r\\\\n    }\\\\r\\\\n}\\\"\\n        }\\n      ],\\n      \\\"fast-lookup-filter\\\": [\\n        null\\n      ]\\n    }\\n  ]\\n}\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful Dry-run commit request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit?=",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"configuration\": \"2020-04-24T17:55:10.96: configure\\n2020-04-24T17:55:10.964: delete firewall filter FILTER-01 term T2 then discard\\ndelete firewall filter FILTER-01 term T2 from icmp-type echo-reply\\ndelete firewall filter FILTER-01 term T3 then accept\\ndelete firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32\\ndelete firewall filter FILTER-01 term T3 from protocol tcp\\ndelete firewall filter FILTER-01 term T1 then accept\\ndelete firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32\\ndelete firewall filter FILTER-01 fast-lookup-filter\\ndelete firewall filter FILTER-01 interface-shared\\ndelete firewall family inet6 filter FILTER-03 term TX filter FILTER-02\\ndelete firewall family inet6 filter FILTER-02 term rule-1 then log\\ndelete firewall family inet6 filter FILTER-02 term rule-1 then discard\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from port snmp\\ndelete firewall family inet6 filter FILTER-02 term rule-2 then accept\\ndelete firewall family inet6 filter FILTER-02 term rule-2 from icmp-code address-unreachable\\n2020-04-24T17:55:10.968: set firewall filter FILTER-01 term T4 then discard\\nset firewall filter FILTER-01 term T4 from destination-address 1.2.3.0/24\\nset firewall filter FILTER-01 term T4 from protocol udp\\nset firewall filter FILTER-01 term T2 then discard\\nset firewall filter FILTER-01 term T2 from icmp-type echo-reply\\nset firewall filter FILTER-01 term T3 then accept\\nset firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32\\nset firewall filter FILTER-01 term T3 from protocol tcp\\nset firewall filter FILTER-01 term T1 then accept\\nset firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32\\nset firewall filter FILTER-01 fast-lookup-filter\\nset firewall family inet6 filter FILTER-02 term rule-1 then log\\nset firewall family inet6 filter FILTER-02 term rule-1 then discard\\nset firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128\\nset firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128\\nset firewall family inet6 filter FILTER-02 term rule-1 from port snmp\\nset firewall family inet6 filter FILTER-02 term rule-2 then accept\\nset firewall family inet6 filter FILTER-02 term rule-2 from icmp-code port-unreachable\\n2020-04-24T17:55:10.968: commit\\n2020-04-24T17:55:10.968: exit configuration-mode\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful commit request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful sync-from-network request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful replace config with oper\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=15ig9foo4u35316qiuzyly0i6g;Path=/restconf"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/restconf; Max-Age=0; Expires=Thu, 23-Apr-2020 15:42:29 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get synced data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"pm.test(\"Targeted Node \", function () {",
											"    pm.expect( pm.response.json()[\"node\"][0][\"node-id\"]).to.eql(\"junos\");",
											"});",
											"var result = pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"junos17-firewall-clinative:firewall\"][\"family\"][\"inet6\"][\"filter\"];",
											"",
											"pm.test(\"Evaluate Filter-02 \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['rule-1','rule-2'];",
											"",
											"     for(var i = 0; i < result.length; i++){",
											"        if( result[i][\"name\"] == \"FILTER-02\"){",
											"            var term = result[i][\"term\"]",
											"            pm.expect(result[i][\"name\"]).to.eql(\"FILTER-02\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            pm.expect(expectedterms).to.include.members(terms);",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 02');",
											"",
											"});",
											"",
											"var filter = pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"junos17-firewall-clinative:firewall\"][\"filter\"];",
											"",
											"pm.test(\"Evaluate filter-01 \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['T1','T2','T3','T4'];",
											"     for(var i = 0; i < filter.length; i++){",
											"        if( filter[i][\"name\"] == \"FILTER-01\"){",
											"            var term = filter[i][\"term\"]",
											"            pm.expect(filter[i][\"name\"]).to.eql(\"FILTER-01\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            pm.expect(expectedterms).to.include.members(terms);",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 02');",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET SYNCED DATA",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2013-10-21node\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:38"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"node\": [\n        {\n            \"node-id\": \"junos\",\n            \"frinx-uniconfig-topology:configuration\": {\n                \"junos17-firewall-clinative:firewall\": {\n                    \"filter\": [\n                        {\n                            \"name\": \"FILTER-01\",\n                            \"term\": [\n                                {\n                                    \"name\": \"T2\",\n                                    \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                                    \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T3\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T1\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                                }\n                            ],\n                            \"fast-lookup-filter\": [\n                                null\n                            ],\n                            \"interface-shared\": [\n                                null\n                            ]\n                        }\n                    ],\n                    \"family\": {\n                        \"inet6\": {\n                            \"filter\": [\n                                {\n                                    \"name\": \"FILTER-03\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"TX\",\n                                            \"filter\": \"FILTER-02\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"name\": \"FILTER-02\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"rule-1\",\n                                            \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                            \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                                        },\n                                        {\n                                            \"name\": \"rule-2\",\n                                            \"then\": \"accept;\",\n                                            \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get synced data operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"pm.test(\"Targeted Node \", function () {",
											"    pm.expect( pm.response.json()[\"node\"][0][\"node-id\"]).to.eql(\"junos\");",
											"});",
											"var result = pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"junos17-firewall-clinative:firewall\"][\"family\"][\"inet6\"][\"filter\"];",
											"",
											"pm.test(\"Evaluate Filter-02 \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['rule-1','rule-2'];",
											"",
											"     for(var i = 0; i < result.length; i++){",
											"        if( result[i][\"name\"] == \"FILTER-02\"){",
											"            var term = result[i][\"term\"]",
											"            pm.expect(result[i][\"name\"]).to.eql(\"FILTER-02\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            pm.expect(expectedterms).to.include.members(terms);",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 02');",
											"",
											"});",
											"",
											"var filter = pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"junos17-firewall-clinative:firewall\"][\"filter\"];",
											"",
											"pm.test(\"Evaluate filter-01 \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['T1','T2','T3','T4'];",
											"     for(var i = 0; i < filter.length; i++){",
											"        if( filter[i][\"name\"] == \"FILTER-01\"){",
											"            var term = filter[i][\"term\"]",
											"            pm.expect(filter[i][\"name\"]).to.eql(\"FILTER-01\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            pm.expect(expectedterms).to.include.members(terms);",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING FILTER - 02');",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET SYNCED DATA",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2013-10-21node\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:38"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"node\": [\n        {\n            \"node-id\": \"junos\",\n            \"frinx-uniconfig-topology:configuration\": {\n                \"junos17-firewall-clinative:firewall\": {\n                    \"filter\": [\n                        {\n                            \"name\": \"FILTER-01\",\n                            \"term\": [\n                                {\n                                    \"name\": \"T2\",\n                                    \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                                    \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T3\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T1\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                                }\n                            ],\n                            \"fast-lookup-filter\": [\n                                null\n                            ],\n                            \"interface-shared\": [\n                                null\n                            ]\n                        }\n                    ],\n                    \"family\": {\n                        \"inet6\": {\n                            \"filter\": [\n                                {\n                                    \"name\": \"FILTER-03\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"TX\",\n                                            \"filter\": \"FILTER-02\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"name\": \"FILTER-02\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"rule-1\",\n                                            \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                            \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                                        },\n                                        {\n                                            \"name\": \"rule-2\",\n                                            \"then\": \"accept;\",\n                                            \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Check firewall shared interfaces deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/interface-shared?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-firewall-clinative:firewall",
										"filter=FILTER-01",
										"interface-shared"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "DELETE FIREWALL OPTION",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/interface-shared",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos",
												"frinx-uniconfig-topology:configuration",
												"junos17-firewall-clinative:firewall",
												"filter=FILTER-01",
												"interface-shared"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check deleted IPV6 firewall rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-03?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-firewall-clinative:firewall",
										"family",
										"inet6",
										"filter=FILTER-03"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": [
								{
									"name": "DELETE IPV6 FIREWALL RULE",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-03?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos",
												"frinx-uniconfig-topology:configuration",
												"junos17-firewall-clinative:firewall",
												"family",
												"inet6",
												"filter=FILTER-03"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Junos Firewall Uc",
					"item": [
						{
							"name": "Create filter with 3 rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											"console.log(\"Response: \" + responseBody)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": [\n        {\n            \"name\": \"INPUT-FILTER\",\n            \"term\": [\n                {\n                    \"name\": \"T1\",\n                    \"then\": \"accept;\",\n                    \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.0/24;\\r\\n    }\\r\\n}\"\n                },\n                {\n                    \"name\": \"T2\",\n                    \"then\": \"accept;\",\n                    \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.20.0/28;\\r\\n    }\\r\\n    protocol tcp;\\r\\n    port 22;\\r\\n}\"\n                },\n                {\n                    \"name\": \"T3\",\n                    \"then\": \"accept;\",\n                    \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=INPUT-FILTER",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-firewall-clinative:firewall",
										"filter=INPUT-FILTER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Asign Filter to GE0/0/1 interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											"console.log(\"Response: \" + responseBody)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"junos17-interfaces-clinative:interfaces\": [\n        {\n            \"name\": \"ge-0/0/1\",\n            \"unit\": [\n                {\n                    \"id\": \"0\",\n                    \"family\": {\n                        \"inet\": {\n                            \"filter\": {\n                                \"input\": \"INPUT-FILTER\"\n                            },\n                            \"address\": \"10.10.10.10/27\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-interfaces-clinative:interfaces/interface=ge-0%2F0%2F1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-interfaces-clinative:interfaces",
										"interface=ge-0%2F0%2F1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful Dry-run commit request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"configuration\": \"2020-04-24T17:55:10.96: configure\\n2020-04-24T17:55:10.964: delete firewall filter FILTER-01 term T2 then discard\\ndelete firewall filter FILTER-01 term T2 from icmp-type echo-reply\\ndelete firewall filter FILTER-01 term T3 then accept\\ndelete firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32\\ndelete firewall filter FILTER-01 term T3 from protocol tcp\\ndelete firewall filter FILTER-01 term T1 then accept\\ndelete firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32\\ndelete firewall filter FILTER-01 fast-lookup-filter\\ndelete firewall filter FILTER-01 interface-shared\\ndelete firewall family inet6 filter FILTER-03 term TX filter FILTER-02\\ndelete firewall family inet6 filter FILTER-02 term rule-1 then log\\ndelete firewall family inet6 filter FILTER-02 term rule-1 then discard\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from port snmp\\ndelete firewall family inet6 filter FILTER-02 term rule-2 then accept\\ndelete firewall family inet6 filter FILTER-02 term rule-2 from icmp-code address-unreachable\\n2020-04-24T17:55:10.968: set firewall filter FILTER-01 term T4 then discard\\nset firewall filter FILTER-01 term T4 from destination-address 1.2.3.0/24\\nset firewall filter FILTER-01 term T4 from protocol udp\\nset firewall filter FILTER-01 term T2 then discard\\nset firewall filter FILTER-01 term T2 from icmp-type echo-reply\\nset firewall filter FILTER-01 term T3 then accept\\nset firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32\\nset firewall filter FILTER-01 term T3 from protocol tcp\\nset firewall filter FILTER-01 term T1 then accept\\nset firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32\\nset firewall filter FILTER-01 fast-lookup-filter\\nset firewall family inet6 filter FILTER-02 term rule-1 then log\\nset firewall family inet6 filter FILTER-02 term rule-1 then discard\\nset firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128\\nset firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128\\nset firewall family inet6 filter FILTER-02 term rule-1 from port snmp\\nset firewall family inet6 filter FILTER-02 term rule-2 then accept\\nset firewall family inet6 filter FILTER-02 term rule-2 from icmp-code port-unreachable\\n2020-04-24T17:55:10.968: commit\\n2020-04-24T17:55:10.968: exit configuration-mode\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful commit request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful sync-from-network request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful replace config with oper\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=15ig9foo4u35316qiuzyly0i6g;Path=/restconf"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/restconf; Max-Age=0; Expires=Thu, 23-Apr-2020 15:42:29 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Check GE0/0/1 filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    var result = pm.response.json()[\"interfaces\"];",
											"pm.test(\"configuration check on ge-0/0/1 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"ge-0/0/1\"){",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.eql(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"10.10.10.10/27\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"filter\"][\"input\"]).to.eql(\"INPUT-FILTER\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/junos17-interfaces-clinative:interfaces=ge-0%2F0%2F1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"junos17-interfaces-clinative:interfaces=ge-0%2F0%2F1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get node config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var result = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"junos17-interfaces-clinative:interfaces\"];",
											"var includes = [\"ge-0/0/3\", \"fxp0\",\"ge-0/0/0\",\"ge-0/0/1\",\"ge-0/0/2\"]",
											"pm.test(\"configuration check\", function() {",
											"        var found = false",
											"        var disableincludes = [\"ge-0/0/3\",\"ge-0/0/0\",\"ge-0/0/2\"]",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(disableincludes.includes(nodeResult[\"name\"])){",
											"                pm.expect(nodeResult[\"disable\"][0]).to.be.null;",
											"                found = true",
											"            }",
											"",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"pm.test(\"configuration check on fxp0 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(nodeResult[\"name\"] === \"fxp0\"){",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.contain(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"10.103.5.208/24\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"",
											"    pm.test(\"configuration check on ge-0/0/1 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"ge-0/0/1\"){",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.eql(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"10.10.10.10/27\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"filter\"][\"input\"]).to.eql(\"INPUT-FILTER\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"var filter = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"junos17-firewall-clinative:firewall\"][\"filter\"];",
											"pm.test(\"Evaluate INPUT-FILTER \", function () {",
											"var found=false;",
											"let terms = []",
											"let expectedterms = ['T1','T2','T3'];",
											"     for(var i = 0; i < filter.length; i++){",
											"        if( filter[i][\"name\"] == \"INPUT-FILTER\"){",
											"            var term = filter[i][\"term\"]",
											"            pm.expect(filter[i][\"name\"]).to.eql(\"INPUT-FILTER\");",
											"            term.forEach((s) =>  terms.push(s[\"name\"])) ",
											"            console.log(\"terms: \" + terms[0] );",
											"            pm.expect(expectedterms).to.include.members(terms);",
											"            found=true",
											"            break;",
											"        }",
											"    }",
											"pm.expect(found).to.satisfy(function(response) {",
											"  return response === true;",
											"}, 'Unable to detect filter.MISSING INPUT FILTER or terms');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration?content=config",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=junos",
										"frinx-uniconfig-topology:configuration"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}