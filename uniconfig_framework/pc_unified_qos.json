{
	"info": {
		"_postman_id": "7fda8fc4-265b-4e4f-8b5d-591500ad13d4",
		"name": "pc_unified_qos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR5 QOS CRUD",
			"item": [
				{
					"name": "XR5 QOS CRUD READERS",
					"item": [
						{
							"name": "configure class-map match-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n class-map match-all {{qos_class_name3}}\n match qos-group {{qos_group}}\n match mpls experimental topmost {{qos_mpls_topmost_min}}\n match precedence {{qos_precedence5}}\n match access-group ipv4 {{qos_class_name3}}\n end-class-map\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show class-map match-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c78ec4b-36f1-46b3-a993-2ae853bda545",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id = all\", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = \" + pm.environment.get(\"qos_precedence5\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence5\"));",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \" + pm.environment.get(\"qos_mpls_topmost_min\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql([0]);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \" + pm.environment.get(\"qos_class_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_class_name3\"));",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 10\", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([10]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name3\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name3\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name3}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_class_name3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete class-map match-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no class-map match-all {{qos_class_name3}}\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted class-map match-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name3}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_class_name3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure class-map match-any and policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any {{qos_class_name5}}\n match mpls experimental topmost {{qos_mpls_topmost_min}} \n match precedence {{qos_precedence0}} \n end-class-map\npolicy-map {{qos_policy_name3}}\n class {{qos_class_name5}}\n  set qos-group {{qos_set_group}}\n  set mpls experimental topmost {{qos_set_mpls_topmost_upd}}\n  set precedence {{qos_precedence0}}\n  priority level {{qos_weight_priority}} \n exit\n class class-default\n  set qos-group {{qos_set_group}}\n  set mpls experimental topmost {{qos_set_mpls_topmost_upd}}\n  set precedence {{qos_precedence0}}\n  police rate percent 1 \n  exit \n  queue-limit {{qos_queue_limit_ms}} ms \n  bandwidth remaining percent {{bandwidth_percent_remaining}} \n exit \n end-policy-map \n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show class-map match-any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9c7b6c3-0198-443b-8537-bbe5231de75e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \" + pm.environment.get(\"qos_mpls_topmost_min\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 = \" + pm.environment.get(\"qos_set_mpls_topmost_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost_upd\")));",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = \" + pm.environment.get(\"qos_set_group\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([4]);",
											"});",
											"//",
											"pm.test(\"Validate precedence = \" + pm.environment.get(\"qos_precedence0\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate  precedense2= \" + pm.environment.get(\"qos_precedence0\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 = \" + pm.environment.get(\"qos_set_mpls_topmost_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost_upd\")));",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 = \" + pm.environment.get(\"qos_set_group\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([4]);",
											"});",
											"//",
											"pm.test(\"Validate precedence3 = \" + pm.environment.get(\"qos_precedence0\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2= \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name5}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_class_name5}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show default class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10c2329f-de9d-4e83-8318-bee527db5a04",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =all \", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \" + pm.environment.get(\"qos_set_mpls_topmost_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost_upd\")));",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = \" + pm.environment.get(\"qos_set_group\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([4]);",
											"});",
											"//",
											"pm.test(\"Validate  = \" + pm.environment.get(\"qos_precedence0\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name_default\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name_default\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name_default\"), function() {",
											"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name_default\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_policy_name_default}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_policy_name_default}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39d16433-565d-47d0-9bb3-01a089a0bec1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence2 =2\", function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//frinx-qos-extension:max-queue-depth-ms",
											"pm.test(\"Validate frinx-qos-extension:max-queue-depth-ms = \" + pm.environment.get(\"qos_queue_limit_ms\"), function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(JSON.parse(pm.environment.get(\"qos_queue_limit_ms\")));",
											"});",
											"//cir-pct-remaining",
											"pm.test(\"Validate cir-pct-remaining = \" + pm.environment.get(\"bandwidth_percent_remaining\"), function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_remaining\")));",
											"});",
											"//max-queue-depth-percent",
											"pm.test(\"Validate max-queue-depth-percent = 1\", function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence2 = 2\", function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											"//id",
											"pm.test(\"Validate config id = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											"//weight",
											"pm.test(\"Validate weight = \" + pm.environment.get(\"qos_weight_priority\"), function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(JSON.parse(pm.environment.get(\"qos_weight_priority\")));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence1 =1 \", function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence1 =1 \", function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name3}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-qos:qos",
										"scheduler-policies",
										"scheduler-policy",
										"{{qos_policy_name3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete class-map match-any and policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no policy-map {{qos_policy_name3}}\n no class-map match-any {{qos_class_name5}}\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted class-map match-any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name5}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_class_name5}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted default class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_policy_name3}}-default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_policy_name3}}-default"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name3}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-qos:qos",
										"scheduler-policies",
										"scheduler-policy",
										"{{qos_policy_name3}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "QOS CRUD",
					"item": [
						{
							"name": "QOS CRUD basic",
							"item": [
								{
									"name": "configure class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name1}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name1}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group}}\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"3\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence1}}\",\n                                        \"{{qos_precedence5}}\"\n                                    ]\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"3\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group2}}\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    },\n                    {\n                        \"id\": \"5\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:qos-group\": [{{qos_group}}]\n                        },\n                        \"config\": {\n                            \"id\": \"5\"\n                        }\n                    },\n                    {\n                        \"id\": \"4\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence1}}\"\n                                    ]\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"4\"\n                        }\n                    },\n                    {\n                        \"id\": \"6\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence2}}\",\n                                \"{{qos_precedence7}}\",\n                                \"{{qos_precedence1}}\"\n                            ]\n                        },\n                        \"config\": {\n                            \"id\": \"6\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e2cf281-6939-47ef-be1e-4abc6bdcbb1f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//config name",
													"pm.test(\"Validate config  name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"var list = pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"for(i = 0; i < arraysize; i++){",
													"   items[i]=list[i][\"id\"];",
													"}",
													"pm.test(\"Validate config id = 1 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 1){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('1');        ",
													"        pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group\"));",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('1');",
													"",
													"});",
													"pm.test(\"Validate config id = 2 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 2){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('2');        ",
													"        pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group2\"));",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('2');",
													"",
													"});",
													"pm.test(\"Validate config id = 3 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 3){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('3');        ",
													"        pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));   ",
													"        pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence5\"));        ",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('3');",
													"",
													"});",
													"pm.test(\"Validate config id = 4 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 4){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('4');       ",
													"        pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('4');",
													"",
													"});",
													"pm.test(\"Validate config id = 5 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 5){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('5');       ",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([10])",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('5');",
													"",
													"});",
													"pm.test(\"Validate config id = 6 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 6){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('6');  ",
													"        pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));   ",
													"        pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence2\"));",
													"        pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence7\"));",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('6');",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name1}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name1}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group_upd}}\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"3\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence1}}\",\n                                        \"{{qos_precedence5}}\",\n                                        \"{{qos_precedence3}}\",\n                                        \"{{qos_precedence4}}\",\n                                        \"{{qos_precedence2}}\",\n                                        \"{{qos_precedence6}}\",\n                                        \"{{qos_precedence7}}\",\n                                        \"{{qos_precedence0}}\"\n                                      \n                                    ]\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"3\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group2_upd}}\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    },\n                    {\n                        \"id\": \"5\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:qos-group\": [{{qos_group2}}]\n                        },\n                        \"config\": {\n                            \"id\": \"5\"\n                        }\n                    },\n                    {\n                        \"id\": \"4\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence1}}\",\n                                        \"{{qos_precedence5}}\",\n                                        \"{{qos_precedence3}}\",\n                                        \"{{qos_precedence4}}\",\n                                        \"{{qos_precedence2}}\",\n                                        \"{{qos_precedence6}}\",\n                                        \"{{qos_precedence7}}\",\n                                        \"{{qos_precedence0}}\"\n                                    ]\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"4\"\n                        }\n                    },\n                    {\n                        \"id\": \"6\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence5}}\",\n                                \"{{qos_precedence3}}\",\n                                \"{{qos_precedence4}}\",\n                                \"{{qos_precedence6}}\",\n                                \"{{qos_precedence0}}\"\n                            ]\n                        },\n                        \"config\": {\n                            \"id\": \"6\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "910df02e-e0e4-4c21-bf3c-e2164f075adf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//config name",
													"pm.test(\"Validate config  name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"var list = pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"];",
													"var items = [];",
													"var item = [];",
													"",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"id\"];",
													"    item[i] = list[i][\"id\"];",
													"",
													"}",
													"pm.test(\"Validate order and no duplicates \", function() {",
													"    ",
													"for(var i = 0; i < list.length; i++){",
													"         pm.expect(items[i]).to.eql(item[i]);",
													"}",
													"    pm.expect(items).to.have.members(item);",
													"    pm.expect(items).to.have.lengthOf.at.most(item.length);",
													"    pm.expect(item).to.have.lengthOf.at.most(items.length);",
													"",
													"});",
													"//id 1",
													"pm.test(\"Validate config id 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql('1');",
													"             pm.expect(list[i][\"config\"][\"id\"]).to.eql('1');",
													"             pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group_upd\"));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes('1');",
													"});",
													"",
													"",
													"pm.test(\"Validate config id = 2\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == \"2\") {",
													"      pm.expect(items[i]).to.eql(\"2\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"2\");        ",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group2_upd\"));        ",
													"    }",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('2');",
													"",
													"});",
													"",
													"pm.test(\"Validate config id = 3\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == 3) {",
													"      pm.expect(items[i]).to.eql(\"3\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"3\");        ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence0\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence2\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence3\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence4\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence5\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence6\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence7\"));",
													"    }",
													"    ",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('3');",
													"",
													"});",
													"",
													"pm.test(\"Validate config id = 4\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == \"4\") {",
													"      pm.expect(items[i]).to.eql(\"4\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"4\");        ",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence0\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence2\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence3\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence4\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence5\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence6\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence7\"));",
													"",
													"    }",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('4');",
													"",
													"});",
													"",
													"pm.test(\"Validate config id = 5\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == \"5\") {",
													"      pm.expect(items[i]).to.eql(\"5\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"5\");        ",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([66])",
													"    }",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('5');",
													"",
													"});",
													"",
													"pm.test(\"Validate config id = 6\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == \"6\") {",
													"      pm.expect(items[i]).to.eql(\"6\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"6\");        ",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence0\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence3\"));",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence4\"));",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence5\"));",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence6\"));",
													"",
													"    }",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('6');",
													"",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update class any map1 remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name1}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name1}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group}}\"\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"{{qos_precedence6}}\"\n                                    ]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name1}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence0}}\"\n                            ]\n                        },\n                         \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"{{qos_precedence6}}\"\n                                    ]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name1}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated class any map1 removed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67fd86c0-0f5a-488e-96fb-1db6cad70e8e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"];",
													"var items=[];",
													"console.log(list);",
													"console.log(list.length);",
													"",
													"for(var i = 0;i < list.length;i++){",
													"    items[i] = list[i][\"id\"];",
													"}",
													"//id",
													"pm.test(\"Validate config id 1 = 1\", function() {",
													"var list = pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"];",
													"    for(var i = 0;i < list.length; i++){",
													"        if(list[i][\"id\"] == \"1\"){",
													"            pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"1\");",
													"            pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group\"));",
													"            pm.expect(list[i][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence6\"));",
													"            pm.expect(list[i][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"        }",
													"    }",
													"            pm.expect(items).to.be.an('array').that.includes(\"1\");",
													"});",
													"pm.test(\"Validate config id 2 = 2\", function() {",
													"var list = pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"];",
													"    for(var i = 0;i < list.length; i++){",
													"        if(list[i][\"id\"] == \"2\"){",
													"            pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"2\");",
													"            pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
													"            pm.expect(list[i][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence6\"));",
													"            pm.expect(list[i][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"        }",
													"    }",
													"            pm.expect(items).to.be.an('array').that.includes(\"2\");",
													"});",
													"",
													"",
													"//config name",
													"pm.test(\"Validate config  name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "configure class all map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6bcc4f5-01fa-4900-9531-5f754a5d35f4",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name2}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name2}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"all\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group}}\",\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence7}}\",\n                                        \"{{qos_precedence3}}\",\n                                        \"{{qos_precedence4}}\"\n                                    ]\n                                }\n                            },\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": [{{qos_mpls_topmost_max}}]\n                                }\n                            },\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence1}}\",\n                                \"{{qos_precedence3}}\"\n                            ],\n                            \"frinx-qos-extension:qos-group\": [{{qos_group3}}]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"{{qos_precedence5}}\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [{{qos_set_group}}],\n                                    \"set-mpls-tc\": {{qos_set_mpls_topmost}}\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name2}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"all\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured class all map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a95e5d29-2315-4c14-97b7-62731d056db4",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//id",
													"pm.test(\"Validate config term id = all \", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
													"});",
													"//",
													"var list = pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"];",
													"",
													"pm.test(\"Validate precedence 1 = \" + pm.environment.get(\"qos_precedence3\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence1\"));",
													"});",
													"//",
													"pm.test(\"Validate precedence 3 = \" + pm.environment.get(\"qos_precedence1\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence3\"));",
													"",
													"",
													"});",
													"//traffic-class",
													"pm.test(\"Validate mpls traffic-class = \" + pm.environment.get(\"qos_mpls_topmost_max\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql([7]);",
													"});",
													"//frinx-qos-extension:qos-group",
													"pm.test(\"Validate frinx-qos-extension:qos-group = \" + pm.environment.get(\"qos_group3\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([512]);",
													"});",
													"//",
													"var list2 = pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]",
													"pm.test(\"Validate precedence ipv6 7 = \" + pm.environment.get(\"qos_precedence7\"), function() {",
													"  pm.expect(list2).to.contain(pm.environment.get(\"qos_precedence7\"));",
													"});",
													"//",
													"pm.test(\"Validate precedence ipv6 3 = \" + pm.environment.get(\"qos_precedence3\"), function() {",
													"    pm.expect(list2).to.contain(pm.environment.get(\"qos_precedence3\"));",
													"",
													"});",
													"//",
													"pm.test(\"Validate precedence ipv4 4 = \" + pm.environment.get(\"qos_precedence4\"), function() {",
													"    pm.expect(list2).to.contain(pm.environment.get(\"qos_precedence4\"));",
													"",
													"});",
													"//frinx-qos-extension:acl-ref",
													"pm.test(\"Validate frinx-qos-extension:acl-ref = \" + pm.environment.get(\"qos_access_group\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = all\", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
													"});",
													"//set-mpls-tc",
													"pm.test(\"Validate set-mpls-tc = \" + pm.environment.get(\"qos_set_mpls_topmost\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost\")));",
													"});",
													"//frinx-qos-extension:set-qos-group",
													"pm.test(\"Validate frinx-qos-extension:set-qos-group = \" + pm.environment.get(\"qos_set_group\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([4]);",
													"});",
													"//",
													"pm.test(\"Validate precedence actions 5 = \" + pm.environment.get(\"qos_precedence5\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence5\"));",
													"});",
													"//target-group",
													"pm.test(\"Validate target-group = \" + pm.environment.get(\"qos_policy_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name2\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update class all map2 remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name2}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name2}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"all\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:qos-group\": [{{qos_group3}}]\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name2}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"all\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured class all map2 remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5381b6a-1d54-4f54-bd68-381516c48467",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config id",
													"pm.test(\"Validate config id all= all\", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
													"});",
													"//frinx-qos-extension:qos-group",
													"pm.test(\"Validate frinx-qos-extension:qos-group = \" + pm.environment.get(\"qos_group3\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([512]);",
													"});",
													"//id",
													"pm.test(\"Validate id all= all\", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update class all second map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6a88d69-f2b0-4bd9-be6a-9b7c352f47a7",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name2}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name2}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"all\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group_upd}}\",\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence5}}\"\n                                    ]\n                                }\n                            },\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": [{{qos_mpls_topmost_min}}]\n                                }\n                            },\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence7}}\",\n                                \"{{qos_precedence3}}\",\n                                \"{{qos_precedence4}}\"\n                            ],\n                            \"frinx-qos-extension:qos-group\": [{{qos_group4}}]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"{{qos_precedence6}}\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [{{qos_set_group2}}],\n                                    \"set-mpls-tc\": {{qos_set_mpls_topmost_upd}}\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name1}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"all\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured class all second map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57755cdf-824c-4ae1-9b5c-ead01fb8bb2f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config id",
													"pm.test(\"Validate config id = all\", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
													"});",
													"//",
													"var list = pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"];",
													"pm.test(\"Validate precedence 7 = \" + pm.environment.get(\"qos_precedence7\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence7\"));",
													"});",
													"//",
													"pm.test(\"Validate precedence 3 = \" + pm.environment.get(\"qos_precedence3\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence3\"));",
													"});",
													"//",
													"pm.test(\"Validate precedence 4 = \" + pm.environment.get(\"qos_precedence4\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence4\"));",
													"});",
													"//traffic-class",
													"pm.test(\"Validate traffic-class = \" + pm.environment.get(\"qos_mpls_topmost_min\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql([0]);",
													"});",
													"//",
													"pm.test(\"Validate ipv4 precedence 5  = \" + pm.environment.get(\"qos_precedence5\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence5\"));",
													"});",
													"//frinx-qos-extension:acl-ref",
													"pm.test(\"Validate frinx-qos-extension:acl-ref = \" + pm.environment.get(\"qos_access_group_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group_upd\"));",
													"});",
													"//frinx-qos-extension:qos-group",
													"pm.test(\"Validate frinx-qos-extension:qos-group = \" + pm.environment.get(\"qos_group4\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([5]);",
													"});",
													"//id",
													"pm.test(\"Validate id = all\", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
													"});",
													"//set-mpls-tc",
													"pm.test(\"Validate set-mpls-tc = \" + pm.environment.get(\"qos_set_mpls_topmost_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost_upd\")));",
													"});",
													"//frinx-qos-extension:set-qos-group",
													"pm.test(\"Validate frinx-qos-extension:set-qos-group = \" + pm.environment.get(\"qos_set_group2\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([5]);",
													"});",
													"//",
													"pm.test(\"Validate actions precedence 6= \" + pm.environment.get(\"qos_precedence6\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence6\"));",
													"});",
													"//target-group",
													"pm.test(\"Validate target-group = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "configure policy plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1b684be-790f-4af9-ba31-94604b9383df",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"max-queue-depth-percent\": {{qos_depth_percent}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"weight\": {{qos_weight_priority}},\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured policy plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "746a1e4f-af46-4033-b11e-6974527622b1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//-----------------------------------------------------",
													"var list = pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"];",
													"var items = [];",
													"var item = [];",
													"console.log(list)",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"sequence\"];",
													"}",
													"//------------------------------------------------------",
													"//sequence 3",
													"pm.test(\"Validate sequence 3=3 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"3\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(3);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(3);",
													"});",
													"//sequence 2",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(items[i]).to.eql(2);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(JSON.parse(pm.environment.get(\"qos_weight_priority\")));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(JSON.parse(pm.environment.get(\"qos_depth_percent\")));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence 1",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql(1);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(JSON.parse(pm.environment.get(\"qos_weight_priority\")));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(JSON.parse(pm.environment.get(\"qos_depth_percent\")));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update policy plmap1 depth percent and priority level",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"max-queue-depth-percent\": {{qos_depth_percent_upd}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"weight\": {{qos_weight_priority_upd}},\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated policy plmap1 depth percent and priority level",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36baf84a-54e0-4dbe-8af4-7677f81875ac",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//-----------------------------------------------------",
													"var list = pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"];",
													"var items = [];",
													"console.log(list)",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"sequence\"];",
													"}",
													"//------------------------------------------------------",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql(1);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(JSON.parse(pm.environment.get(\"qos_weight_priority_upd\"))); ",
													"            ",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update policy plmap1 with bandwidth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"cir-pct-remaining\": {{bandwidth_percent_remaining}},\n                                \"frinx-qos-extension:max-queue-depth-ms\": {{qos_queue_limit_ms}},\n                                \"cir-pct\": {{bandwidth_percent}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated policy plmap1 with bandwidth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "436e3eba-a31f-4ed9-a910-89f2645dc3a7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//-----------------------------------------------------",
													"var list = pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"];",
													"var items = [];",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"sequence\"];",
													"}",
													"console.log()",
													"",
													"//------------------------------------------------------",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(JSON.parse(pm.environment.get(\"qos_queue_limit_ms\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_remaining\")));",
													"        }",
													"    }",
													"",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update policy plmap1 with bandwidth updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"cir-pct-remaining\": {{bandwidth_percent_remaining_upd}},\n                                \"frinx-qos-extension:max-queue-depth-ms\": {{qos_queue_limit_ms_upd}},\n                                \"cir-pct\": {{bandwidth_percent_upd}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated policy plmap1 with bandwidth updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fdaa776-71ba-4f61-a81c-974bab31351c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"var list = pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"];",
													"var items = [];",
													"console.log(list)",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"sequence\"];",
													"}",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql(1);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(JSON.parse(pm.environment.get(\"qos_queue_limit_ms_upd\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_upd\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_remaining_upd\")));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "configure class any map1 to plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ec78efb-81dd-4fb5-bc8a-ef395d604ef8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name1}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name1}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"inacl1\"\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 1,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"internet\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [\n                                        5\n                                    ]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name1}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 1,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"internet\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [\n                                        5\n                                    ]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name1}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update policy plmap1 to map1 and map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"cir-pct-remaining\": {{bandwidth_percent_remaining_upd}},\n                                \"frinx-qos-extension:max-queue-depth-ms\": {{qos_queue_limit_ms_upd}},\n                                \"cir-pct\": {{bandwidth_percent_upd}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    },\n                                        {\n                        \"sequence\": 3,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name1}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name1}}\",\n                                        \"queue\": \"{{qos_class_name1}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 3\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated policy plmap1 to map1 and map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34207411-175c-4685-a282-c6cb8a6dc692",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"//-------------------------------",
													"var list = pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"]",
													"var items = [];",
													"for(var i = 0; i < list.length;i++){",
													"    items[i]=list[i][\"sequence\"];",
													"    ",
													"    ",
													"}",
													"//-----------------------------------",
													"//sequence",
													"pm.test(\"Validate sequence 3=3 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"3\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(3);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(3);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql(1);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(JSON.parse(pm.environment.get(\"qos_queue_limit_ms_upd\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_upd\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_remaining_upd\")));",
													"",
													"            ",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(items[i]).to.eql(2);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete policy plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted policy plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete class map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete class map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted class any map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}